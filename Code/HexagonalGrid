extends Spatial


const TILE_MATERIALS = [
	preload("res://blue.tres"),
	preload("res://green.tres"),
	preload("res://green.tres"),
	preload("res://green.tres"),
	preload("res://brown.tres"),
	preload("res://brown.tres"),
	preload("res://brown.tres"),
	preload("res://brown.tres"),
]

const TILE_SIZE := 1.0
const HEX_TILE = preload("res://HexTile.tscn")

export (int, 2, 20) var grid_size := 30


func _ready() -> void:
	_generate_grid()


func _generate_grid():
	var tile_index := 0
	# Create a seed - An array
	var rng = RandomNumberGenerator.new()
	# randomize the Array 
	rng.randomize()
	# Create the grid 
	for x in range(grid_size):
		var tile_coordinates := Vector2.ZERO
		# For every that is complete tilt the next hexagon by cos 30.
		tile_coordinates.x = x * TILE_SIZE * cos(deg2rad(30))
		# Check the size of the column 
		tile_coordinates.y = 0 if x % 2 == 0 else TILE_SIZE / 2
		# Instance different types of hexagons 
		for y in range(grid_size):
			# Create the grid and prepare to paint the hexagons 
			var tile = HEX_TILE.instance()
			add_child(tile)
			# Set spawn coordinates 
			tile.translate(Vector3(tile_coordinates.x, 0, tile_coordinates.y))
			tile_coordinates.y += TILE_SIZE
			# Add texture to empty object 
			tile.get_node("unit_hex/mergedBlocks(Clone)").material_override = get_tile_material(tile_index)
			# Select random texture colour.
			tile_index += rng.randi_range(1,10)


func get_tile_material(tile_index: int):
	var index = tile_index % TILE_MATERIALS.size()
	return TILE_MATERIALS[index]
